geom_boxplot()+facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth)+aes(ToothGrowth$supp, ToothGrowth$len)+
geom_boxplot(aes(fill = supp))+
xlab("Supplement")+ylab("Length")+ggtitle("Supplement vs Tooth Length")
ggplot(ToothGrowth)+aes(x = supp, y = len)+
geom_boxplot(aes(fill = supp))+
xlab("Supplement")+ylab("Length")+ggtitle("Supplement vs Tooth Length")
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
geom_line()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
stat_smooth()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", aes(supp))
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
stat_smooth(method = "lm")
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()+
stat_smooth()
ggplot(ToothGrowth)+aes(x = dose, y = len, color = supp)+
geom_point()
#comparing supplement dose and length
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
t.test(len~supp,data=ToothGrowth)
lowdose <- select(ToothGrowth, dose = 0.5)
lowdose <- select(ToothGrowth, dose = "0.5")
lowdose <- select(ToothGrowth, dose = "0.5")
lowdose <- select(ToothGrowth, dose == "0.5")
lowdose <- select(ToothGrowth, dose == 0.5)
lowdose <- filter(ToothGrowth, dose == 0.5)
low_dose <- filter(ToothGrowth, dose == 0.5)
med_dose <- filter(ToothGrowth, dose == 1)
high_dose <- filter(ToothGrowth, dose == 2)
t.test(len~dose,data=high_dose)
dose1 <- filter(ToothGrowth, dose == 0.5 | dose == 1)
dose2 <- filter(ToothGrowth, dose == 0.5 | dose == 2)
dose3 <- filter(ToothGrowth, dose == 1 | dose == 2)
t.test(len~dose,data=dose1)
t.test(len~dose,data=dose2)
t.test(len~dose,data=dose3)
mean <- ToothGrowth %>%
group_by(supp) %>%
mean(len)
mean <- ToothGrowth %>%
group_by(supp)
View(mean)
str)mean
str(mea )
str(mean)
data("ToothGrowth")
#updating dose to factor
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
TGGroup <- ToothGrowth %>%
group_by(supp) %>%
TGGroup <- ToothGrowth %>%
group_by(supp)
str(TGGroup)
View(ToothGrowth)
summary(TGGroup)
mean(TGGroup$len)
mean(TGGroup$group)
mean(TGGroup$supp)
mean(TGGroup$dose)
?tapply
tapply(ToothGrowth, supp, mean(len))
tapply(ToothGrowth, ToothGrowth$supp, mean(ToothGrowth$len))
tapply(ToothGrowth, supp, len)
tapply(ToothGrowth, supp, mean(len))
tapply(ToothGrowth, supp, mean)
tapply(ToothGrowth$len, ToothGrowth$supp, mean)
t.test(supp~dose,data=dose1)
t.test(len~supp,data=ToothGrowth)
#subset data to analyze lenght by dosage
dose1 <- filter(ToothGrowth, dose == 0.5 | dose == 1)
dose2 <- filter(ToothGrowth, dose == 0.5 | dose == 2)
dose3 <- filter(ToothGrowth, dose == 1 | dose == 2)
t.test(supp~dose,data=dose1)
View(dose1)
head(dose1)
str(dose1)
OJ <- filter(ToothGrowth, supp == "OJ")
VC <- filter(ToothGrowth, supp == "VC")
View(OJ)
t.test(len~dose,data=OJ)
OJ1<- filter(ToothGrowth, supp == "OJ" | dose == 0.5)
View(OJ1)
OJ1<- filter(ToothGrowth, supp == "OJ" & dose == 0.5)
View(OJ1)
OJ1 <- filter(ToothGrowth, supp == "OJ" & dose == 0.5 | dose = 1)
OJ2 <- filter(ToothGrowth, supp == "OJ" & dose == 0.5 | dose = 2)
OJ3 <- filter(ToothGrowth, supp == "OJ" & dose == 1 | dose = 2)
OJ1 <- filter(ToothGrowth, supp == "OJ" & dose == 0.5 | dose == 1)
OJ2 <- filter(ToothGrowth, supp == "OJ" & dose == 0.5 | dose == 2)
OJ3 <- filter(ToothGrowth, supp == "OJ" & dose == 1 | dose == 2)
t.test(len~dose,data=OJ1)
t.test(len~dose,data=OJ1)
t.test(len~dose,data=OJ2)
t.test(len~dose,data=OJ3)
VC1 <- filter(ToothGrowth, supp == "VC" & dose == 0.5 | dose == 1)
VC2 <- filter(ToothGrowth, supp == "VC" & dose == 0.5 | dose == 2)
VC3 <- filter(ToothGrowth, supp == "VC" & dose == 1 | dose == 2)
t.test(len~dose,data=OJ1)
t.test(len~dose,data=OJ2)
t.test(len~dose,data=OJ3)
t.test(len~dose,data=VC1)
t.test(len~dose,data=VC2)
t.test(len~dose,data=VC3)
#dose of 0.5 and 1
t.test(len~dose,data=dose1)
#dose of 0.5 and 2
t.test(len~dose,data=dose2)
#dose of 1 and 2
t.test(len~dose,data=dose3)
t.test(len~supp,data=ToothGrowth)
t.test(len~dose,data=OJ1)
t.test(len~dose,data=OJ2)
t.test(len~dose,data=OJ3)
t.test(len~dose,data=VC1)
t.test(len~dose,data=VC2)
t.test(len~dose,data=VC3)
library(ggplot2)
library(dplyr)
data("ToothGrowth")
#updating dose to factor
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
#plot of supplement vs tooth length
ggplot(ToothGrowth)+aes(x = supp, y = len)+
geom_boxplot(aes(fill = supp))+
xlab("Supplement")+ylab("Length")+ggtitle("Supplement vs Tooth Length")
#comparing supplement dose and length
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
#mean length of OJ and VC supplement
tapply(ToothGrowth$len, ToothGrowth$supp, mean)
t.test(len~supp,data=ToothGrowth)
dose1 <- filter(ToothGrowth, dose == 0.5 | dose == 1)
dose2 <- filter(ToothGrowth, dose == 0.5 | dose == 2)
dose3 <- filter(ToothGrowth, dose == 1 | dose == 2)
#dose of 0.5 and 1
t.test(len~dose,data=dose1)
#dose of 0.5 and 2
t.test(len~dose,data=dose2)
#dose of 1 and 2
t.test(len~dose,data=dose3)
library(knitr)
knitr()
output: html_document
knitr::opts_chunk$set(echo = TRUE)
ggplot()+aes(meandata)+
geom_histogram(aes(y=..density..), binwidth = 0.25, fill = "darkgrey")+
ggtitle("Comparison to Normal Distribution")+
geom_vline(xintercept = tmean, color = "red", linetype = "solid", size = 1)+
ylab("Density")+xlab("Mean")+
geom_line(aes(y=..density..), stat = 'density', size=1, color = "darkgreen")+
stat_function(fun = dnorm, args = list(mean = tmean, sd = tsd), color = "blue", size = 1)
library(ggplot2)
#setup simulation
set.seed(555)
lambda <- 0.2 #set lambda
sims <- 1000 #number of simulations
n <- 40 #samples
#running simulation
simdata <- replicate(sims, rexp(n,lambda))
meandata <- colMeans(simdata)
#mean of simuluation
simmean <- mean(meandata)
print(simmean)
#theoritical mean
tmean <- 1/lambda
print(tmean)
#plot of simulated distribution
ggplot()+aes(meandata)+
geom_histogram(binwidth = 0.25, fill = "darkgreen")+
ggtitle("Histogram of Simulated Means")+
geom_vline(xintercept = tmean, color = "black", linetype = "solid", size = 1)
ggplot()+aes(meandata)+
geom_histogram(aes(y=..density..), binwidth = 0.25, fill = "darkgrey")+
ggtitle("Histogram of Simulated Means")+
geom_vline(xintercept = tmean, color = "red", linetype = "solid", size = 1)+
ylab("Density")+xlab("Mean")
#end question 1
#simulated sd and var
simsd <- sd(meandata)
simvar <- simsd^2
print(simvar)
#theoretical standard deviation and variance
tsd <- (1/lambda)/sqrt(n)
tvar <- tsd^2
print(tvar)
#simulated distribution vs normal distribution
ggplot()+aes(meandata)+
geom_histogram(aes(y=..density..), binwidth = 0.25, fill = "darkgrey")+
ggtitle("Comparison to Normal Distribution")+
geom_vline(xintercept = tmean, color = "red", linetype = "solid", size = 1)+
ylab("Density")+xlab("Mean")+
geom_line(aes(y=..density..), stat = 'density', size=1, color = "darkgreen")+
stat_function(fun = dnorm, args = list(mean = tmean, sd = tsd), color = "blue", size = 1)
getwd
getwd()
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
library(ggplot2)
library(dplyr)
data("ToothGrowth")
#updating dose to factor
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
#mean length of OJ and VC supplement
tapply(ToothGrowth$len, ToothGrowth$supp, mean)
#plot of supplement vs tooth length
ggplot(ToothGrowth)+aes(x = supp, y = len)+
geom_boxplot(aes(fill = supp))+
xlab("Supplement")+ylab("Length")+ggtitle("Supplement vs Tooth Length")
#comparing supplement dose and length
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth)+ geom_boxplot()+ facet_grid(.~supp)+
aes(x = dose, y = len, fill = dose)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ group_by(supp) + facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose, group = supp)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
qplot(ToothGrowth, supp, dose)
qplot(supp, dose, data = ToothGrowth)
ggplot(ToothGrowth) + aes(x = supp, y = len) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
ggplot(ToothGrowth)+ aes(x = dose, y = len, fill = dose)+
geom_boxplot()+ facet_grid(.~supp)+
ggtitle("Supplement Dose vs Length")
ggplot(ToothGrowth) + aes(x = dose, y = len) +
geom_boxplot(aes(fill = dose)) + facet_wrap(~ supp)
ggplot(ToothGrowth) + aes(x = supp, y = len) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
ggplot(ToothGrowth) + aes(x = supp, y = len) +
geom_boxplot(aes(fill = supp)) + facet_wrap(.~dose)
ggplot(ToothGrowth) + aes(x = supp, y = len) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~dose)
library("XML")
â‰ˆ
library("XML")
install.packages("XML")
library("XML")
#Download fantasy football projections from FantasyPros.com
qb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
rb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/rb.php", stringsAsFactors = FALSE)$data
wr_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/wr.php", stringsAsFactors = FALSE)$data
te_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/te.php", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/rankings/qb-cheatsheets.php", stringsAsFactors = FALSE)$data
rankFP <- read.csv("/Users/hcam/Desktop/FantasyPros_2016_Preseason_Overall_Rankings - FantasyPros_2016_Preseason_Overall_Rankings.csv")
View(ToothGrowth)
rankFP <- read.csv("/Users/hcam/Desktop/FantasyPros_2016_Preseason_Overall_Rankings - FantasyPros_2016_Preseason_Overall_Rankings.csv")
View(rankFP)
install.packages("devtools")
library(devtools)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
library("ffanalytics")
library("ffanalytics"
)
rankBoris <- read.csv("/Users/hcam/Desktop/weekly-ALL.csv")
View(rankBoris)
library("httr")
?httr
?XML
?xml
qb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
rb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/rb.php", stringsAsFactors = FALSE)$data
wr_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/wr.php", stringsAsFactors = FALSE)$data
te_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/te.php", stringsAsFactors = FALSE)$data
url <- https://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php
url <- www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php
url <- "www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php"
readHTMLTable(url, stringsAsFactors = FALSE)
install.packages("RCurl"l)
install.packages("RCurl")
library(RCurl)
readHTMLTable(url, stringsAsFactors = FALSE)
library(XML)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php#", stringsAsFactors = FALSE)
readHTMLTable(http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php#, stringsAsFactors = FALSE)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php#", stringsAsFactors = FALSE)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = FALSE)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php")
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php")
readHTMLTable("www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php")
readHTMLTable("www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = F)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = F)
library(RCurl)
readHTMLTable("https://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = F)
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = F)
readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = FALSE)$data
library(httr)
getTEST <- get("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php")
getTEST <- getURL("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php")
getTEST <- readHTMLTable(rawToChar(getTEST$content), stringsAsFactors = F)
getTEST2 <- readHTMLTable(getTEST)
getTEST2 <- readHTMLTable(getTEST, stringsAsFactors = F)
getTEST
url <- https://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php\
url <- "https://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php\"
url <- "https://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php"
getTEST <- getURL(url)
readHTMLTable(getTEST)
TEST3 <- readHTMLTable(getTEST)
TEST3
str(TEST3)
getTEST <- getURL(url)
TEST3 <- readHTMLTable(getTEST, stringsAsFactors = FALSE)
data.frame(TEST3)
url
summary(TEST3)
testdata<- data.frame(TEST3$data)
View(testdata)
testexp<- data.frame(TEST3$experts)
View(testexp)
!is.na(testdata)
testdata[!is.na(testdata)]
testdata[is.na(testdata)]
testdata[is.na(testdata), ]
is.na(testdata)
testdata-51 <- testdata[-51,]
testdata[-51,]
testdatano51 <- testdata[-51,]
View(testdatano51)
url <- "http://r-exercises.com/wp-content/uploads/2016/07/data.csv"
data <- read.csv(url, stringsAsFactors = FALSE)
library(dplyr)
library(lubridate)
bofa16 <- filter(data, Date >= "2016-01-01" & Symbol == "BAC")
group_by(data, Symbol)
Gdata <- group_by(data, Symbol)
max(Gdata$Close)
MaxClose <- filter(Gdata, Close == max(Close))
MinClose <- filter(Gdata, Close == min(Close))
MaxMin <- select(MaxClose, Symbol, Close, Date)
MaxMin<- rename(MaxMin, "Max Price" = Close)
MaxMin$MinPrice <- as.numeric(MinClose$Close[match(MaxMin$Symbol, MinClose$Symbol)])
MaxMin$MinDate <- as.Date(MinClose$Date[match(MaxMin$Symbol, MinClose$Symbol)])
install.packages("shiny")
install.packages("devtools")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
show()
show(x)
x < c(1)
x <- c(1)
show(x)
install.packages("tidyr")
dataurl <- "https://s3-us-west-1.amazonaws.com/fftiers/out/current/weekly-ALL.csv"
ffdata <- read.csv(dataurl, stringsAsFactors = FALSE)
View(ffdata)
shiny::runApp('Desktop/Data Products Project')
?gsub
ffdata$Pos <- gsub("^[0-9]{1,}", "", ffdata$Position)
ffdata$Pos <- gsub("^[0-9]{1,} [a-z][A-Z] ", "", ffdata$Position)
View(ffdata)
View(ffdata)
head(ffdata)
str(ffdata)
ffdata$Pos <- gsub('[0-9]+', '', ffdata$Position)
View(ffdata)
?filter
test <- filter(ffdata, Pos == "WR")
View(test)
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
shiny::runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
shiny::runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
library(DT)
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
dataurl <- "https://s3-us-west-1.amazonaws.com/fftiers/out/current/weekly-ALL.csv"
ffdata <- read.csv(dataurl, stringsAsFactors = FALSE)
ffdata$Pos <- gsub('[0-9]+', '', ffdata$Position)
View(ffdata)
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
shiny::runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
runApp('Desktop/Data Products Project')
install.packages(slidify)
install.packages("slidify")
publish("hcam05", "slidifyFF16")
library(slidify)
publish("hcam05", "slidifyFF16")
gitstatus()
git
git init
git status
slidify("index.Rmd")
getwd()
setwd("/Users/hcam/Desktop/Data Products Project/Slidify/")
slidify("index.Rmd")
publish("hcam05", "slidifyFF16")
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('~/Desktop/Data Products Project')
library(rsconnect)
runApp('~/Desktop/Data Products Project')
library(shiny)
runApp('~/Desktop/Data Products Project')
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp('~/Desktop/Data Products Project')
